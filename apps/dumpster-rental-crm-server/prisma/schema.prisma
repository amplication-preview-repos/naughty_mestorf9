datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Order {
  createdAt  DateTime  @default(now())
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
  hauler     Hauler?   @relation(fields: [haulerId], references: [id])
  haulerId   String?
  id         String    @id @default(cuid())
  product    Product?  @relation(fields: [productId], references: [id])
  productId  String?
  salesRep   SalesRep? @relation(fields: [salesRepId], references: [id])
  salesRepId String?
  updatedAt  DateTime  @updatedAt
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?
}

model Customer {
  address   String?
  createdAt DateTime @default(now())
  email     String?
  id        String   @id @default(cuid())
  name      String?
  orders    Order[]
  phone     String?
  quotes    Quote[]
  updatedAt DateTime @updatedAt
}

model TeamSupportRep {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  quotes    Quote[]
  updatedAt DateTime @updatedAt
}

model Product {
  createdAt   DateTime @default(now())
  description String?
  id          String   @id @default(cuid())
  name        String?
  orders      Order[]
  price       Float?
  quotes      Quote[]
  updatedAt   DateTime @updatedAt
  zipCode     String?
}

model Hauler {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  name      String?
  orders    Order[]
  pricing   Float?
  quotes    Quote[]
  updatedAt DateTime @updatedAt
  zipCode   String?
}

model SalesRep {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  orders    Order[]
  quotes    Quote[]
  updatedAt DateTime @updatedAt
}

model Quote {
  additionalCharges Float?
  amount            Float?
  createdAt         DateTime         @default(now())
  customer          Customer?        @relation(fields: [customerId], references: [id])
  customerId        String?
  deliveryDate      DateTime?
  finalWeight       Float?
  hauler            Hauler?          @relation(fields: [haulerId], references: [id])
  haulerId          String?
  id                String           @id @default(cuid())
  pickupDate        DateTime?
  product           Product?         @relation(fields: [productId], references: [id])
  productId         String?
  salesRep          SalesRep?        @relation(fields: [salesRepId], references: [id])
  salesRepId        String?
  status            EnumQuoteStatus?
  teamSupportRep    TeamSupportRep?  @relation(fields: [teamSupportRepId], references: [id])
  teamSupportRepId  String?
  updatedAt         DateTime         @updatedAt
}

model User {
  createdAt DateTime           @default(now())
  email     String?            @unique
  firstName String?
  id        String             @id @default(cuid())
  lastName  String?
  orders    Order[]
  password  String
  roles     Json
  typeField EnumUserTypeField?
  updatedAt DateTime           @updatedAt
  username  String             @unique
}

model OrderStatus {
  coreStatus EnumOrderStatusCoreStatus?
  createdAt  DateTime                   @default(now())
  id         String                     @id @default(cuid())
  subStatus  EnumOrderStatusSubStatus?
  updatedAt  DateTime                   @updatedAt
}

enum EnumQuoteStatus {
  Option1
}

enum EnumUserTypeField {
  Option1
}

enum EnumOrderStatusCoreStatus {
  Option1
}

enum EnumOrderStatusSubStatus {
  Option1
}
