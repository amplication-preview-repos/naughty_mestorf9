/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SalesRep as PrismaSalesRep,
  Order as PrismaOrder,
  Quote as PrismaQuote,
} from "@prisma/client";

export class SalesRepServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SalesRepCountArgs, "select">): Promise<number> {
    return this.prisma.salesRep.count(args);
  }

  async salesReps(
    args: Prisma.SalesRepFindManyArgs
  ): Promise<PrismaSalesRep[]> {
    return this.prisma.salesRep.findMany(args);
  }
  async salesRep(
    args: Prisma.SalesRepFindUniqueArgs
  ): Promise<PrismaSalesRep | null> {
    return this.prisma.salesRep.findUnique(args);
  }
  async createSalesRep(
    args: Prisma.SalesRepCreateArgs
  ): Promise<PrismaSalesRep> {
    return this.prisma.salesRep.create(args);
  }
  async updateSalesRep(
    args: Prisma.SalesRepUpdateArgs
  ): Promise<PrismaSalesRep> {
    return this.prisma.salesRep.update(args);
  }
  async deleteSalesRep(
    args: Prisma.SalesRepDeleteArgs
  ): Promise<PrismaSalesRep> {
    return this.prisma.salesRep.delete(args);
  }

  async findOrders(
    parentId: string,
    args: Prisma.OrderFindManyArgs
  ): Promise<PrismaOrder[]> {
    return this.prisma.salesRep
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .orders(args);
  }

  async findQuotes(
    parentId: string,
    args: Prisma.QuoteFindManyArgs
  ): Promise<PrismaQuote[]> {
    return this.prisma.salesRep
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .quotes(args);
  }
}
