/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SalesRep } from "./SalesRep";
import { SalesRepCountArgs } from "./SalesRepCountArgs";
import { SalesRepFindManyArgs } from "./SalesRepFindManyArgs";
import { SalesRepFindUniqueArgs } from "./SalesRepFindUniqueArgs";
import { CreateSalesRepArgs } from "./CreateSalesRepArgs";
import { UpdateSalesRepArgs } from "./UpdateSalesRepArgs";
import { DeleteSalesRepArgs } from "./DeleteSalesRepArgs";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { QuoteFindManyArgs } from "../../quote/base/QuoteFindManyArgs";
import { Quote } from "../../quote/base/Quote";
import { SalesRepService } from "../salesRep.service";
@graphql.Resolver(() => SalesRep)
export class SalesRepResolverBase {
  constructor(protected readonly service: SalesRepService) {}

  async _salesRepsMeta(
    @graphql.Args() args: SalesRepCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SalesRep])
  async salesReps(
    @graphql.Args() args: SalesRepFindManyArgs
  ): Promise<SalesRep[]> {
    return this.service.salesReps(args);
  }

  @graphql.Query(() => SalesRep, { nullable: true })
  async salesRep(
    @graphql.Args() args: SalesRepFindUniqueArgs
  ): Promise<SalesRep | null> {
    const result = await this.service.salesRep(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SalesRep)
  async createSalesRep(
    @graphql.Args() args: CreateSalesRepArgs
  ): Promise<SalesRep> {
    return await this.service.createSalesRep({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SalesRep)
  async updateSalesRep(
    @graphql.Args() args: UpdateSalesRepArgs
  ): Promise<SalesRep | null> {
    try {
      return await this.service.updateSalesRep({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SalesRep)
  async deleteSalesRep(
    @graphql.Args() args: DeleteSalesRepArgs
  ): Promise<SalesRep | null> {
    try {
      return await this.service.deleteSalesRep(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Order], { name: "orders" })
  async findOrders(
    @graphql.Parent() parent: SalesRep,
    @graphql.Args() args: OrderFindManyArgs
  ): Promise<Order[]> {
    const results = await this.service.findOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Quote], { name: "quotes" })
  async findQuotes(
    @graphql.Parent() parent: SalesRep,
    @graphql.Args() args: QuoteFindManyArgs
  ): Promise<Quote[]> {
    const results = await this.service.findQuotes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
