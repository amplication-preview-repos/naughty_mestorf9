/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { FloatNullableFilter } from "../../util/FloatNullableFilter";
import { Type } from "class-transformer";
import { IsOptional, ValidateNested, IsEnum } from "class-validator";
import { CustomerWhereUniqueInput } from "../../customer/base/CustomerWhereUniqueInput";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { HaulerWhereUniqueInput } from "../../hauler/base/HaulerWhereUniqueInput";
import { StringFilter } from "../../util/StringFilter";
import { ProductWhereUniqueInput } from "../../product/base/ProductWhereUniqueInput";
import { SalesRepWhereUniqueInput } from "../../salesRep/base/SalesRepWhereUniqueInput";
import { EnumQuoteStatus } from "./EnumQuoteStatus";
import { TeamSupportRepWhereUniqueInput } from "../../teamSupportRep/base/TeamSupportRepWhereUniqueInput";

@InputType()
class QuoteWhereInput {
  @ApiProperty({
    required: false,
    type: FloatNullableFilter,
  })
  @Type(() => FloatNullableFilter)
  @IsOptional()
  @Field(() => FloatNullableFilter, {
    nullable: true,
  })
  additionalCharges?: FloatNullableFilter;

  @ApiProperty({
    required: false,
    type: FloatNullableFilter,
  })
  @Type(() => FloatNullableFilter)
  @IsOptional()
  @Field(() => FloatNullableFilter, {
    nullable: true,
  })
  amount?: FloatNullableFilter;

  @ApiProperty({
    required: false,
    type: () => CustomerWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CustomerWhereUniqueInput)
  @IsOptional()
  @Field(() => CustomerWhereUniqueInput, {
    nullable: true,
  })
  customer?: CustomerWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  deliveryDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: FloatNullableFilter,
  })
  @Type(() => FloatNullableFilter)
  @IsOptional()
  @Field(() => FloatNullableFilter, {
    nullable: true,
  })
  finalWeight?: FloatNullableFilter;

  @ApiProperty({
    required: false,
    type: () => HaulerWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => HaulerWhereUniqueInput)
  @IsOptional()
  @Field(() => HaulerWhereUniqueInput, {
    nullable: true,
  })
  hauler?: HaulerWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  pickupDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: () => ProductWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ProductWhereUniqueInput)
  @IsOptional()
  @Field(() => ProductWhereUniqueInput, {
    nullable: true,
  })
  product?: ProductWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => SalesRepWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => SalesRepWhereUniqueInput)
  @IsOptional()
  @Field(() => SalesRepWhereUniqueInput, {
    nullable: true,
  })
  salesRep?: SalesRepWhereUniqueInput;

  @ApiProperty({
    required: false,
    enum: EnumQuoteStatus,
  })
  @IsEnum(EnumQuoteStatus)
  @IsOptional()
  @Field(() => EnumQuoteStatus, {
    nullable: true,
  })
  status?: "Option1";

  @ApiProperty({
    required: false,
    type: () => TeamSupportRepWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TeamSupportRepWhereUniqueInput)
  @IsOptional()
  @Field(() => TeamSupportRepWhereUniqueInput, {
    nullable: true,
  })
  teamSupportRep?: TeamSupportRepWhereUniqueInput;
}

export { QuoteWhereInput as QuoteWhereInput };
