/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Hauler } from "./Hauler";
import { HaulerCountArgs } from "./HaulerCountArgs";
import { HaulerFindManyArgs } from "./HaulerFindManyArgs";
import { HaulerFindUniqueArgs } from "./HaulerFindUniqueArgs";
import { CreateHaulerArgs } from "./CreateHaulerArgs";
import { UpdateHaulerArgs } from "./UpdateHaulerArgs";
import { DeleteHaulerArgs } from "./DeleteHaulerArgs";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { QuoteFindManyArgs } from "../../quote/base/QuoteFindManyArgs";
import { Quote } from "../../quote/base/Quote";
import { HaulerService } from "../hauler.service";
@graphql.Resolver(() => Hauler)
export class HaulerResolverBase {
  constructor(protected readonly service: HaulerService) {}

  async _haulersMeta(
    @graphql.Args() args: HaulerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Hauler])
  async haulers(@graphql.Args() args: HaulerFindManyArgs): Promise<Hauler[]> {
    return this.service.haulers(args);
  }

  @graphql.Query(() => Hauler, { nullable: true })
  async hauler(
    @graphql.Args() args: HaulerFindUniqueArgs
  ): Promise<Hauler | null> {
    const result = await this.service.hauler(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Hauler)
  async createHauler(@graphql.Args() args: CreateHaulerArgs): Promise<Hauler> {
    return await this.service.createHauler({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Hauler)
  async updateHauler(
    @graphql.Args() args: UpdateHaulerArgs
  ): Promise<Hauler | null> {
    try {
      return await this.service.updateHauler({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Hauler)
  async deleteHauler(
    @graphql.Args() args: DeleteHaulerArgs
  ): Promise<Hauler | null> {
    try {
      return await this.service.deleteHauler(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Order], { name: "orders" })
  async findOrders(
    @graphql.Parent() parent: Hauler,
    @graphql.Args() args: OrderFindManyArgs
  ): Promise<Order[]> {
    const results = await this.service.findOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Quote], { name: "quotes" })
  async findQuotes(
    @graphql.Parent() parent: Hauler,
    @graphql.Args() args: QuoteFindManyArgs
  ): Promise<Quote[]> {
    const results = await this.service.findQuotes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
