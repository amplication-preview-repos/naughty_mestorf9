/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Hauler as PrismaHauler,
  Order as PrismaOrder,
  Quote as PrismaQuote,
} from "@prisma/client";

export class HaulerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.HaulerCountArgs, "select">): Promise<number> {
    return this.prisma.hauler.count(args);
  }

  async haulers(args: Prisma.HaulerFindManyArgs): Promise<PrismaHauler[]> {
    return this.prisma.hauler.findMany(args);
  }
  async hauler(
    args: Prisma.HaulerFindUniqueArgs
  ): Promise<PrismaHauler | null> {
    return this.prisma.hauler.findUnique(args);
  }
  async createHauler(args: Prisma.HaulerCreateArgs): Promise<PrismaHauler> {
    return this.prisma.hauler.create(args);
  }
  async updateHauler(args: Prisma.HaulerUpdateArgs): Promise<PrismaHauler> {
    return this.prisma.hauler.update(args);
  }
  async deleteHauler(args: Prisma.HaulerDeleteArgs): Promise<PrismaHauler> {
    return this.prisma.hauler.delete(args);
  }

  async findOrders(
    parentId: string,
    args: Prisma.OrderFindManyArgs
  ): Promise<PrismaOrder[]> {
    return this.prisma.hauler
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .orders(args);
  }

  async findQuotes(
    parentId: string,
    args: Prisma.QuoteFindManyArgs
  ): Promise<PrismaQuote[]> {
    return this.prisma.hauler
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .quotes(args);
  }
}
