/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TeamSupportRepService } from "../teamSupportRep.service";
import { TeamSupportRepCreateInput } from "./TeamSupportRepCreateInput";
import { TeamSupportRep } from "./TeamSupportRep";
import { TeamSupportRepFindManyArgs } from "./TeamSupportRepFindManyArgs";
import { TeamSupportRepWhereUniqueInput } from "./TeamSupportRepWhereUniqueInput";
import { TeamSupportRepUpdateInput } from "./TeamSupportRepUpdateInput";
import { QuoteFindManyArgs } from "../../quote/base/QuoteFindManyArgs";
import { Quote } from "../../quote/base/Quote";
import { QuoteWhereUniqueInput } from "../../quote/base/QuoteWhereUniqueInput";

export class TeamSupportRepControllerBase {
  constructor(protected readonly service: TeamSupportRepService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TeamSupportRep })
  async createTeamSupportRep(
    @common.Body() data: TeamSupportRepCreateInput
  ): Promise<TeamSupportRep> {
    return await this.service.createTeamSupportRep({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TeamSupportRep] })
  @ApiNestedQuery(TeamSupportRepFindManyArgs)
  async teamSupportReps(
    @common.Req() request: Request
  ): Promise<TeamSupportRep[]> {
    const args = plainToClass(TeamSupportRepFindManyArgs, request.query);
    return this.service.teamSupportReps({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TeamSupportRep })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async teamSupportRep(
    @common.Param() params: TeamSupportRepWhereUniqueInput
  ): Promise<TeamSupportRep | null> {
    const result = await this.service.teamSupportRep({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TeamSupportRep })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTeamSupportRep(
    @common.Param() params: TeamSupportRepWhereUniqueInput,
    @common.Body() data: TeamSupportRepUpdateInput
  ): Promise<TeamSupportRep | null> {
    try {
      return await this.service.updateTeamSupportRep({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TeamSupportRep })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTeamSupportRep(
    @common.Param() params: TeamSupportRepWhereUniqueInput
  ): Promise<TeamSupportRep | null> {
    try {
      return await this.service.deleteTeamSupportRep({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/quotes")
  @ApiNestedQuery(QuoteFindManyArgs)
  async findQuotes(
    @common.Req() request: Request,
    @common.Param() params: TeamSupportRepWhereUniqueInput
  ): Promise<Quote[]> {
    const query = plainToClass(QuoteFindManyArgs, request.query);
    const results = await this.service.findQuotes(params.id, {
      ...query,
      select: {
        additionalCharges: true,
        amount: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        deliveryDate: true,
        finalWeight: true,

        hauler: {
          select: {
            id: true,
          },
        },

        id: true,
        pickupDate: true,

        product: {
          select: {
            id: true,
          },
        },

        salesRep: {
          select: {
            id: true,
          },
        },

        status: true,

        teamSupportRep: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/quotes")
  async connectQuotes(
    @common.Param() params: TeamSupportRepWhereUniqueInput,
    @common.Body() body: QuoteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      quotes: {
        connect: body,
      },
    };
    await this.service.updateTeamSupportRep({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/quotes")
  async updateQuotes(
    @common.Param() params: TeamSupportRepWhereUniqueInput,
    @common.Body() body: QuoteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      quotes: {
        set: body,
      },
    };
    await this.service.updateTeamSupportRep({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/quotes")
  async disconnectQuotes(
    @common.Param() params: TeamSupportRepWhereUniqueInput,
    @common.Body() body: QuoteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      quotes: {
        disconnect: body,
      },
    };
    await this.service.updateTeamSupportRep({
      where: params,
      data,
      select: { id: true },
    });
  }
}
