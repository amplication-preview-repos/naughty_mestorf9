/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TeamSupportRep } from "./TeamSupportRep";
import { TeamSupportRepCountArgs } from "./TeamSupportRepCountArgs";
import { TeamSupportRepFindManyArgs } from "./TeamSupportRepFindManyArgs";
import { TeamSupportRepFindUniqueArgs } from "./TeamSupportRepFindUniqueArgs";
import { CreateTeamSupportRepArgs } from "./CreateTeamSupportRepArgs";
import { UpdateTeamSupportRepArgs } from "./UpdateTeamSupportRepArgs";
import { DeleteTeamSupportRepArgs } from "./DeleteTeamSupportRepArgs";
import { QuoteFindManyArgs } from "../../quote/base/QuoteFindManyArgs";
import { Quote } from "../../quote/base/Quote";
import { TeamSupportRepService } from "../teamSupportRep.service";
@graphql.Resolver(() => TeamSupportRep)
export class TeamSupportRepResolverBase {
  constructor(protected readonly service: TeamSupportRepService) {}

  async _teamSupportRepsMeta(
    @graphql.Args() args: TeamSupportRepCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TeamSupportRep])
  async teamSupportReps(
    @graphql.Args() args: TeamSupportRepFindManyArgs
  ): Promise<TeamSupportRep[]> {
    return this.service.teamSupportReps(args);
  }

  @graphql.Query(() => TeamSupportRep, { nullable: true })
  async teamSupportRep(
    @graphql.Args() args: TeamSupportRepFindUniqueArgs
  ): Promise<TeamSupportRep | null> {
    const result = await this.service.teamSupportRep(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TeamSupportRep)
  async createTeamSupportRep(
    @graphql.Args() args: CreateTeamSupportRepArgs
  ): Promise<TeamSupportRep> {
    return await this.service.createTeamSupportRep({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TeamSupportRep)
  async updateTeamSupportRep(
    @graphql.Args() args: UpdateTeamSupportRepArgs
  ): Promise<TeamSupportRep | null> {
    try {
      return await this.service.updateTeamSupportRep({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TeamSupportRep)
  async deleteTeamSupportRep(
    @graphql.Args() args: DeleteTeamSupportRepArgs
  ): Promise<TeamSupportRep | null> {
    try {
      return await this.service.deleteTeamSupportRep(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Quote], { name: "quotes" })
  async findQuotes(
    @graphql.Parent() parent: TeamSupportRep,
    @graphql.Args() args: QuoteFindManyArgs
  ): Promise<Quote[]> {
    const results = await this.service.findQuotes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
